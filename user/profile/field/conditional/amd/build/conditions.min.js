// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Handles applying conditions.
 *
 * @module     profilefield_conditional/conditions
 * @package    profilefield_conditional
 * @copyright  2016 Shamim Rezaie <http://foodle.org>
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
define(['jquery'], function($) {

     /** -------------------------- Start custom code ------------------------------------ **/
    $(function () { // On ready
            var elements = [
                "instpublica",          // Sector - Servidores publicos
                "instcivil",            // Sector - Miembro de Sociedad civil
                "instotro",             // Sector - Otra instituci√≥n de sociedad civil
                "departamento",         // Departamento
                "munisahuacha",         // Municipios
                "munissantaana",        // Municipios
                "munissonso",           // Municipios
                "munischalate",         // Municipios
                "munislalib",           // Municipios
                "munissanvic",          // Municipios
                "muniscabanas",         // Municipios
                "munislapaz",           // Municipios
                "munisusulu",           // Municipios
                "munismora",            // Municipios
                "munissanmig",          // Municipios
                "munislaunion",         // Municipios
                "muniscusca",           // Municipios
                "munissansa",           // Municipios
                "instgobcentral",       // Institucion publica
                "instautonomas",        // Institucion publica
                "instempublicas",       // Institucion publica
                "insthospital",         // Institucion publica
                "servidorpub",          // Servidor publico
                "servidoruaip",         // Tipo de servidor publico
                "servidorgda",          // Tipo de servidor publico
                "servidoroir",          // Tipo de servidor publico
                "servidorconcejo",      // Tipo de servidor publico
                "servidoreducacion",    // Tipo de servidor publico
                "servidorunidadadmin",  // Tipo de servidor publico
                "otroservidorpub",      // Tipo de servidor publico
                "fechanombramiento",    // Tipo de servidor publico
                "acuerdonombramiento",  // Tipo de servidor publico
                "instsoccivil",         // Institucion de sociedad civil
                "tipoong",              // Tipo de institucion civil
                "tipoeducacion",        // Tipo de institucion civil
                "tipopolitico",         // Tipo de institucion civil
                "tipoadesco",           // Tipo de institucion civil
                "tipoasocprof",         // Tipo de institucion civil
                "tipoprivada",          // Tipo de institucion civil
                "tipootro"              // Tipo de institucion civil
            ];

            $.each(elements, function(key, value){
                if (value != "fechanombramiento" && value != "acuerdonombramiento") {
                    var elt = document.getElementById("id_profile_field_"+value); // Select or input  
                    if (elt.tagName === "SELECT" && elt.selectedIndex != 0) { //
                        showElement(value);
                    } else if (elt.tagName === "INPUT" && elt.value != "") {
                        showElement(value);
                    } else {
                        hideElement(value);
                    }
                } else {
                    hideElement(value);
                }
            });

            // Para la condicion: Sector
            $("#id_profile_field_sector").on('change', function() {
                var index = $("#id_profile_field_sector")[0].selectedIndex;
                if (index === 1) {
                    hideAllElements(elements);
                    showElement("instpublica");
                } else if (index === 2) {
                    hideAllElements(elements);
                    showElement("instcivil");
                } else {
                    hideAllElements(elements);
                }
            });

            // Para la condicion: Institucion publica
            $("#id_profile_field_instpublica").on('change', function() {
                var index = $("#id_profile_field_instpublica")[0].selectedIndex;
                if (index === 1) {
                    showElement("instgobcentral");
                    hideElement("instautonomas");
                    hideElement("instempublicas");
                    hideElement("insthospital");
                    hideElement("departamento");
                    setMunicipio();
                    setTipoServidor();
                    showElement("servidorpub");
                } else if (index === 2) {
                    showElement("instautonomas");
                    hideElement("instgobcentral");
                    hideElement("instempublicas");
                    hideElement("insthospital");
                    hideElement("departamento");
                    setMunicipio();
                    setTipoServidor();
                    showElement("servidorpub");
                } else if (index === 3) {
                    showElement("instempublicas");
                    hideElement("instgobcentral");
                    hideElement("instautonomas");
                    hideElement("insthospital");
                    hideElement("departamento");
                    setMunicipio();
                    setTipoServidor();
                    showElement("servidorpub");
                } else if (index === 4) {
                    showElement("insthospital");
                    hideElement("instgobcentral");
                    hideElement("instempublicas");
                    hideElement("instautonomas");
                    hideElement("departamento");
                    setMunicipio();
                    setTipoServidor();
                    showElement("servidorpub");
                } else if (index === 5) {
                    showElement("departamento");
                    hideElement("instempublicas");
                    hideElement("instgobcentral");
                    hideElement("instautonomas");
                    hideElement("insthospital");
                    setMunicipio();
                    setTipoServidor();
                    showElement("servidorpub");
                } else {
                    hideElement("instempublicas");
                    hideElement("instgobcentral");
                    hideElement("instautonomas");
                    hideElement("insthospital");
                    hideElement("departamento");
                    setMunicipio();
                    setTipoServidor();
                    hideElement("servidorpub");
                }
            });

            // Para la condicion: departamento
            $("#id_profile_field_departamento").on('change', function() {
                var index = $("#id_profile_field_departamento")[0].selectedIndex;
                switch(index){
                    case 1:
                        setMunicipio("munisahuacha");
                    break;
                    case 2:
                        setMunicipio("munissantaana");
                    break;
                    case 3:
                        setMunicipio("munissonso");
                    break;
                    case 4:
                        setMunicipio("munischalate");
                    break;
                    case 5:
                        setMunicipio("muniscusca");
                    break;
                    case 6:
                        setMunicipio("munissansa");
                    break;
                    case 7:
                        setMunicipio("munislalib");
                    break;
                    case 8:
                        setMunicipio("munissanvic");
                    break;
                    case 9:
                        setMunicipio("muniscabanas");
                    break;
                    case 10:
                        setMunicipio("munislapaz");
                    break;
                    case 11:
                        setMunicipio("munisusulu");
                    break;
                    case 12:
                        setMunicipio("munissanmig");
                    break;
                    case 13:
                        setMunicipio("munismora");
                    break;
                    case 14:
                        setMunicipio("munislaunion");
                    break;
                    default:
                        setMunicipio();
                    break;
                }    
            });

            $("#id_profile_field_servidorpub").on('change', function() {
                var index = $("#id_profile_field_servidorpub")[0].selectedIndex;
                switch(index){
                    case 1:
                        setTipoServidor("servidoruaip");
                    break;
                    case 2:
                        setTipoServidor("servidorgda");
                    break;
                    case 3:
                        setTipoServidor("servidoroir");
                    break;
                    case 4:
                        setTipoServidor("servidorconcejo");
                    break;
                    case 5:
                        setTipoServidor("servidoreducacion");
                    break;
                    case 6:
                        setTipoServidor();
                    break;
                    case 7:
                        setTipoServidor("servidorunidadadmin");
                    break;
                    case 8:
                        setTipoServidor("otroservidorpub");
                    break;
                    default:
                        setTipoServidor();
                    break;
                }
            });

            $("#id_profile_field_instcivil").on('change', function() {
                var index = $("#id_profile_field_instcivil")[0].selectedIndex;
                switch(index){
                    case 1:
                        setTipoSocCivil("tipoong");
                    break;
                    case 2:
                        setTipoSocCivil("tipoeducacion");
                    break;
                    case 3:
                        setTipoSocCivil("tipopolitico");
                    break;
                    case 4:
                        setTipoSocCivil();
                    break;
                    case 5:
                        setTipoSocCivil("tipoadesco");
                    break;
                    case 6:
                        setTipoSocCivil("tipoasocprof");
                    break;
                    case 7:
                        setTipoSocCivil("tipoprivada");
                    break;
                    case 8:
                        setTipoSocCivil("tipootro");
                    break;
                    case 9:
                        setTipoSocCivil();
                    break;
                    default:
                        setTipoSocCivil();
                    break;
                }
            });

            $('#mform1').submit(function(event) {
                event.preventDefault(); //this will prevent the default submit

                $( "div" ).remove( ".hidden-element" );

                $(this).unbind('submit').submit(); // continue the submit unbind preventDefault
            });

        

    });

    function setTipoSocCivil(tiposoc){
        var tipossoc = [
            "tipoong",              // Tipo de usuario de la sociedad civil
            "tipoeducacion",        // Tipo de usuario de la sociedad civil
            "tipopolitico",         // Tipo de usuario de la sociedad civil
            "tipoadesco",           // Tipo de usuario de la sociedad civil
            "tipoasocprof",         // Tipo de usuario de la sociedad civil
            "tipoprivada",          // Tipo de usuario de la sociedad civil
            "tipootro"              // Tipo de usuario de la sociedad civil
        ];

        $.each(tipossoc, function(key, value){
            hideElement(value);
        });

        if (tiposoc !== "") {
                showElement("departamento");
                showElement("instsoccivil");
                showElement(tiposoc);
            
        }
    }

    function setTipoServidor(tiposervidor = ""){
        var tipos = [
            "servidoruaip",         // Tipo de servidor publico
            "servidorgda",          // Tipo de servidor publico
            "servidoroir",          // Tipo de servidor publico
            "servidorconcejo",      // Tipo de servidor publico
            "servidoreducacion",    // Tipo de servidor publico
            "servidorunidadadmin",  // Tipo de servidor publico
            "otroservidorpub",      // Tipo de servidor publico
            "acuerdonombramiento",  // Tipo de servidor publico
            "fechanombramiento"     // Dato solo para tipo de servidor UAIP
        ];

        $.each(tipos, function(key, value){
            hideElement(value);
        });

        if (tiposervidor !== ""){
            if (tiposervidor === "servidoruaip") {
                showElement(tiposervidor);
                if ( $( "#fitem_id_profile_field_acuerdonombramiento" ).length ) {
                    showElement("acuerdonombramiento");
                }
                showElement("fechanombramiento");
            } else if (tiposervidor === "otroservidorpub") {
                showElement("otroservidorpub");
            } else {
                showElement(tiposervidor);
            }
        }
    }

    function setMunicipio(municipio = "") {
        var municipios = [
            "munisahuacha",         // Municipios de Ahuachapan
            "munissantaana",        // Municipios de Santa Ana
            "munissonso",           // Municipios de Sonsonate
            "munischalate",         // Municipios de Chalatenango
            "munissansa",           // Municipios de San Salvador
            "munislalib",           // Municipios de La Libertad
            "munissanvic",          // Municipios de San Vicente
            "muniscabanas",         // Municipios de Caba√±as
            "munislapaz",           // Municipios de La Paz
            "munisusulu",           // Municipios de Usulut√°n
            "munismora",            // Municipios de Moraz√°n
            "munissanmig",          // Municipios de San Miguel
            "munislaunion",         // Municipios de La Uni√≥n
            "muniscusca"            // Municipios de Cuscatl√°n
        ];
        $.each(municipios, function(key, value){
            hideElement(value);
        });

        if (municipio !== "") {
            showElement(municipio);
        }

    }

    function getElement(field) { // Find an element
        var fieldRow = $('#fitem_id_profile_field_' + field);
        if (fieldRow.length === 0) {    // Boost style.
            fieldRow = $('.fitem [name=profile_field_' + field + '], .fitem [name^=profile_field_' + field + '\\[]').closest('.fitem.row');
        }

        return fieldRow;
    }

    function hideAllElements(elements){
        $.each(elements, function(key, value){
            hideElement(value);
        });
    }
    
    function hideElement(field){
        var fieldRow = $('#fitem_id_profile_field_' + field);
        fieldRow.hide("fast")
        fieldRow.addClass("hidden-element");
    }

    function showElement(field){
        var fieldRow = $('#fitem_id_profile_field_' + field);
        fieldRow.show("slow");
        fieldRow.removeClass("hidden-element");
    }

    /** -------------------------- Ends custom code ------------------------------------ **/


    /**
     * Get the jQuet object of the row that contains provided field.
     *
     * @param {String} field The name of a field.
     * @return {jQuery} The form row that contains the field.
     */
    var getFieldRow = function(field) {
        var fieldRow = $('#fitem_id_profile_field_' + field);
        if (fieldRow.length === 0) {    // Boost style.
            fieldRow = $('.fitem [name=profile_field_' + field + '], .fitem [name^=profile_field_' + field + '\\[]')
                    .closest('.fitem.row');
        }
        return fieldRow;
    };

    /**
     * Condition object.
     *
     * @param {String} fieldName The conditional field name.
     * @param {String} conditions Set of conditions as a json string.
     * @param {Boolean|Number} hideAll Whether to hide all fields initially or not.
     * @param {String} reqHTML The html string for specifying required fields.
     * @constructor
     */
    var Conditions = function(fieldName, conditions, hideAll, reqHTML) {
        this.fieldName = fieldName;
        this.conditions = $.parseJSON(conditions);
        var allElements = [];
        this.conditions.forEach(function(option) {
            option.hiddenfields.forEach(function(field) {
                if ($.inArray(field, allElements) == -1) {
                    allElements.push(field);
                }
            });
            option.requiredfields.forEach(function(field) {
                if ($.inArray(field, allElements) == -1) {
                    allElements.push(field);
                }
            });
        });

        this.allElements = allElements;
        this.hiddenElements = {};
        this.hideAll = hideAll == 1;
        this.reqHTML = reqHTML;

        this.initApplyRule();
        $('#id_profile_field_' + fieldName).change(this.applyRule.bind(this)).closest('form').submit(this.beforeSubmit.bind(this));
    };

    Conditions.prototype.fieldName = null;
    Conditions.prototype.conditions = null;
    Conditions.prototype.allElements = null;
    Conditions.prototype.hiddenElements = null;
    Conditions.prototype.hideAll = null;
    /** @var {Array} options Menu options. */
    Conditions.prototype.options = null;


    /**
     * Things need to be done prior to form submit: Remove hidden form elements from form.
     *
     * @param {Object} event
     */
    Conditions.prototype.beforeSubmit = function(event) {
        console.log("Yo no te estoy dejando");

        var temp;
        if (!event.isDefaultPrevented()) {
            for (var field in this.hiddenElements) {
                if (!this.hiddenElements.hasOwnProperty(field)) {
                    continue;
                }
                temp = getFieldRow(field).html();
                if (temp != '') {
                    this.hiddenElements[field] = temp;
                    getFieldRow(field).html('');
                }
            }
        }


    };

    /**
     * Keep record of fields that are required when the conditional field is not set and add a required rule for this case.
     */
    Conditions.prototype.initReqStars = function() {
        var initReqFields = [];
        var initHiddenFields = [];

        this.allElements.forEach(function(element) {
            if ((getFieldRow(element).find('.fitemtitle .req').length !== 0) ||
                    (getFieldRow(element).find('abbr.text-danger').length !== 0)) {     // Support for Boost.
                initReqFields.push(element);
            }
        });

        if (this.hideAll) {
            this.conditions.forEach(function(value) {
                value.hiddenfields.forEach(function(field) {
                    initHiddenFields.push(field);
                });
            });
        }

        this.conditions.push({'option': '', 'hiddenfields': initHiddenFields, 'requiredfields': initReqFields});
    };

    /**
     * Display stars for new required fields and remove stars for fields that are no longer required.
     */
    Conditions.prototype.toggleReqStars = function() {
        var selectedValue = $('#id_profile_field_' + this.fieldName).val();
        var reqHTML = this.reqHTML;
        var allElements = this.allElements;
        var requiredfields;
        var fieldRow;
        var node;
        var boostStyle = null;

        this.conditions.forEach(function(option) {
            if (option.option == selectedValue) {
                requiredfields = option.requiredfields;
                allElements.forEach(function(element) {
                    fieldRow = getFieldRow(element);
                    if (boostStyle === null) {
                        boostStyle = fieldRow.has('.pull-xs-right').length;
                    }
                    if ($.inArray(element, requiredfields) != -1) {
                        if (boostStyle) {
                            node = fieldRow.find('abbr.text-danger');
                            if (node.length !== 0) {
                                reqHTML = node.html();
                            } else {    // Fallback.
                                node = fieldRow.find('.req');
                            }
                        } else {
                            node = fieldRow.find('.req');
                        }

                        // The following check is required to prevent putting multiple asterisks.
                        if (node.length === 0) {
                            node = $(reqHTML).hide();
                            if (boostStyle) {
                                fieldRow.find('.pull-xs-right').append(node);
                            } else {
                                fieldRow.find('.fitemtitle label').append(node);
                            }
                        }

                        node.show('slow');
                    } else {
                        fieldRow.find('abbr.text-danger').hide('slow', function() {
                            // The following check is required to prevent removing asterisk when the selected item
                            // is quickly changed.
                            if ($.inArray(element, requiredfields) != -1) {
                                getFieldRow(element).find('abbr.text-danger').remove();
                            }
                        });
                        fieldRow.find('.req').hide('slow', function() {
                            // The following check is required to prevent removing asterisk when the selected item
                            // is quickly changed.
                            if ($.inArray(element, requiredfields) != -1) {
                                getFieldRow(element).find('.req').remove();
                            }
                        });
                    }
                });
            }
        });

        this.reqHTML = reqHTML; // In case it is updated above as a result of Boost style compatibility.
    };

    /**
     * Hide hidden fields and show fields that are no longer hidden.
     */
    Conditions.prototype.applyRule = function() {
        var hiddenElements = this.hiddenElements;
        var selectedValue = $('#id_profile_field_' + this.fieldName).val();
        var hideAll = this.hideAll;
        var name = null;

        this.conditions.forEach(function(value) {
            if (selectedValue === '') {
                if (hideAll) {
                    value.hiddenfields.forEach(function(field) {
                        if (!(field in hiddenElements)) {
                            hiddenElements[field] = '';
                            getFieldRow(field).children().hide('slow');
                        }
                    });
                } else {
                    for (name in hiddenElements) {
                        if (!hiddenElements.hasOwnProperty(name)) {
                            continue;
                        }
                        if (hiddenElements[name]) {
                            getFieldRow(name).html(hiddenElements[name]);
                        }
                        getFieldRow(name).children().show('slow');
                        delete hiddenElements[name];
                    }
                }
            }

            if (value.option == selectedValue) {
                for (name in hiddenElements) {
                    if (!hiddenElements.hasOwnProperty(name)) {
                        continue;
                    }
                    if ($.inArray(name, value.hiddenfields) == -1) {
                        if (hiddenElements[name]) {
                            getFieldRow(name).html(hiddenElements[name]);
                        }
                        getFieldRow(name).children().show('slow');
                        delete hiddenElements[name];
                    }
                }

                value.hiddenfields.forEach(function(field) {
                    if (!(field in hiddenElements)) {
                        hiddenElements[field] = '';
                        getFieldRow(field).children().hide('slow');
                    }
                });
            }
        });

        this.hiddenElements = hiddenElements;

        this.toggleReqStars();
    };

    /**
     * Hide hidden fields instantly.
     */
    Conditions.prototype.initApplyRule = function() {
        var hiddenElements = this.hiddenElements;
        var hideAll = this.hideAll;

        if (hideAll) {
            this.conditions.forEach(function(value) {
                value.hiddenfields.forEach(function(field) {
                    if (!(field in hiddenElements)) {
                        hiddenElements[field] = '';
                        // We use children here and in applyRule to overcome the disableif issue in non-boost themes.
                        getFieldRow(field).children().hide();
                    }
                });
            });
        }

        this.hiddenElements = hiddenElements;

        this.initReqStars();
        this.applyRule();
    };

    return {

        /**
         * Main initialisation.
         *
         * @param {String} fieldName The conditional field name.
         * @param {String} conditions Set of conditions as a json string.
         * @param {Boolean|Number} hideAll Whether to hide all fields initially or not.
         * @param {String} reqHTML The html string for specifying required fields.
         * @return {Conditions} A new instance of Conditions.
         * @method init
         */
        initial: function() {
            
        }
    };
});
